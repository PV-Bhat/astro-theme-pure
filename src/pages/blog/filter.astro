---
import { Image } from 'astro:assets'
import { getBlogCollection, getUniqueTags, sortMDByDate } from 'astro-pure/server'
import { Button, FormattedDate, Icon } from 'astro-pure/user'
import PageLayout from '@/layouts/BaseLayout.astro'
import Breadcrumbs from '@/components/core/Breadcrumbs.astro'
import config from '../../site.config'
import '../../styles/animations.css'
import '../../styles/glass.css'

// Breadcrumb items
const breadcrumbItems = [
  {
    label: "Blog",
    href: "/blog"
  },
  {
    label: "Filter",
    href: "/blog/filter"
  }
];

const meta = {
  title: 'Filter Blog Posts',
  description: 'Filter and sort blog posts by various criteria',
}

// Get all blog posts and unique tags
const allPosts = await getBlogCollection();
const sortedPosts = sortMDByDate(allPosts);
const uniqueTags = getUniqueTags(allPosts);

// Extract unique categories from posts (simulated - in production this would be a separate metadata field)
const categoriesSet = new Set<string>();
sortedPosts.forEach(post => {
  if (post.data.tags && post.data.tags.length > 0) {
    // Use the first tag as a pseudo-category for demonstration
    categoriesSet.add(post.data.tags[0].charAt(0).toUpperCase() + post.data.tags[0].slice(1));
  }
});
const categories = ['All', ...Array.from(categoriesSet)].slice(0, 7);

// Get query parameters for filtering
const { searchParams } = Astro.url;
const selectedCategory = searchParams.get('category')?.toLowerCase() || 'all';
const searchQuery = searchParams.get('q') || '';
const tagFilter = searchParams.get('tag') || '';
const sortOrder = searchParams.get('sort') || 'newest';
const includeArchives = searchParams.get('archives') !== 'false';

// Apply filters
let filteredPosts = [...sortedPosts];

// Filter by category (using first tag as pseudo-category)
if (selectedCategory !== 'all') {
  filteredPosts = filteredPosts.filter(post => 
    post.data.tags && 
    post.data.tags.some(tag => tag.toLowerCase() === selectedCategory)
  );
}

// Filter by search query
if (searchQuery) {
  const query = searchQuery.toLowerCase();
  filteredPosts = filteredPosts.filter(post => 
    post.data.title.toLowerCase().includes(query) || 
    post.data.description.toLowerCase().includes(query)
  );
}

// Filter by specific tag
if (tagFilter) {
  filteredPosts = filteredPosts.filter(post => 
    post.data.tags && 
    post.data.tags.some(tag => tag.toLowerCase() === tagFilter.toLowerCase())
  );
}

// Filter archives
if (!includeArchives) {
  filteredPosts = filteredPosts.filter(post => 
    !post.data.tags || 
    !post.data.tags.some(tag => 
      ["philosophy", "mind", "reflection", "thinking"].includes(tag.toLowerCase())
    )
  );
}

// Apply sorting
if (sortOrder === 'oldest') {
  filteredPosts.reverse();
} else if (sortOrder === 'title_asc') {
  filteredPosts.sort((a, b) => a.data.title.localeCompare(b.data.title));
} else if (sortOrder === 'title_desc') {
  filteredPosts.sort((a, b) => b.data.title.localeCompare(a.data.title));
}

// Function to estimate read time in minutes
function getEstimatedReadTime(post) {
  // In a real implementation, you'd use the actual remarkPluginFrontmatter.minutesRead
  // For now, we'll use a simple approximation based on description length
  const wordsPerMinute = 200;
  const wordCount = post.data.description.split(/\s+/).length;
  return Math.max(1, Math.ceil(wordCount / wordsPerMinute)) + ' min read';
}
---

<PageLayout {meta}>
  <div class="max-w-4xl mx-auto px-4">
    <!-- Breadcrumbs navigation -->
    <div class="mb-6">
      <Breadcrumbs items={breadcrumbItems} />
    </div>
    
    <!-- Back button, matching original theme style -->
    <div class="mb-4">
      <Button title='Back' href='/blog' style='back' />
    </div>
    
    <!-- Header with silver text effect -->
    <div class="mb-8">
      <h1 class="text-4xl font-bold mb-3 bg-clip-text text-transparent bg-gradient-to-b from-white to-gray-400 silver-text">
        Filter & Sort
      </h1>
      
      <p class="text-gray-300">
        Customize your view to find exactly what you're looking for
      </p>
    </div>
    
    <!-- Filter Controls - Clean and cohesive design -->
    <div class="glass-card p-5 rounded-xl border border-white/10 mb-8">
      <!-- Category Tabs - Horizontal Scrolling -->
      <div class="mb-5 overflow-x-auto hide-scrollbar">
        <div class="flex space-x-2 pb-1">
          {categories.map(category => (
            <a 
              href={`/blog/filter?category=${category.toLowerCase()}`}
              class={`px-3 py-1.5 rounded-full text-sm whitespace-nowrap transition-colors duration-300 ${
                category.toLowerCase() === selectedCategory 
                  ? 'bg-green-500/20 text-green-400 border border-green-500/30' 
                  : 'bg-black/20 text-gray-300 border border-white/5 hover:bg-black/40 hover:border-white/10'
              }`}
            >
              {category}
            </a>
          ))}
        </div>
      </div>
      
      <!-- Search and Advanced Filters -->
      <form id="filter-form" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-5">
        <!-- Search -->
        <div class="md:col-span-1">
          <div class="relative">
            <input 
              type="text" 
              name="q"
              value={searchQuery}
              placeholder="Search posts..." 
              class="w-full bg-black/20 border border-white/10 rounded-lg px-4 py-2 pl-10 text-white placeholder:text-gray-500 focus:outline-none focus:border-green-500/50"
            />
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </div>
        
        <!-- Sort Options -->
        <div class="md:col-span-1">
          <div class="relative">
            <select 
              name="sort"
              class="w-full appearance-none bg-black/20 border border-white/10 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-green-500/50 pr-10"
            >
              <option value="newest" selected={sortOrder === 'newest'}>Sort by: Newest First</option>
              <option value="oldest" selected={sortOrder === 'oldest'}>Sort by: Oldest First</option>
              <option value="title_asc" selected={sortOrder === 'title_asc'}>Sort by: Title (A-Z)</option>
              <option value="title_desc" selected={sortOrder === 'title_desc'}>Sort by: Title (Z-A)</option>
            </select>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 pointer-events-none" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
        
        <!-- Tag Filter -->
        <div class="md:col-span-1">
          <div class="relative">
            <select 
              name="tag"
              class="w-full appearance-none bg-black/20 border border-white/10 rounded-lg px-4 py-2 text-white focus:outline-none focus:border-green-500/50 pr-10"
            >
              <option value="">Filter by tag</option>
              {uniqueTags.map(tag => (
                <option value={tag} selected={tagFilter === tag}>{tag}</option>
              ))}
            </select>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 pointer-events-none" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
      
        <!-- Additional Filters -->
        <div class="flex flex-wrap gap-3 items-center md:col-span-3">
          <span class="text-sm text-gray-400">Include:</span>
          
          <!-- Include Archives Toggle -->
          <label class="inline-flex items-center cursor-pointer">
            <input 
              type="checkbox" 
              name="archives" 
              value="true"
              checked={includeArchives} 
              class="sr-only peer"
              id="archive-toggle"
            >
            <div class="relative w-9 h-5 bg-gray-800 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-green-600"></div>
            <span class="ml-2 text-sm text-gray-300">Archives</span>
          </label>
          
          <!-- Apply Button -->
          <button 
            type="submit"
            class="ml-auto px-4 py-1.5 bg-green-500/20 border border-green-500/30 rounded-lg text-green-400 hover:bg-green-500/30 transition-colors text-sm"
          >
            Apply Filters
          </button>
        </div>
      </form>
    </div>
    
    <!-- Results with improved styling -->
    <div class="mb-8">
      <div class="flex justify-between items-center mb-5">
        <h2 class="text-xl font-medium flex items-center">
          <span>Results</span>
          <span class="ml-2 text-sm text-gray-400">({filteredPosts.length} posts)</span>
        </h2>
        
        <!-- View toggle -->
        <div class="flex space-x-2">
          <button id="compact-view" class="p-1.5 rounded-lg bg-green-500/20 border border-green-500/30 text-green-400">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
            </svg>
          </button>
          <button id="expanded-view" class="p-1.5 rounded-lg bg-black/20 border border-white/10 text-gray-400 hover:bg-black/30 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Results list -->
      <div id="results-container" class="space-y-5">
        {filteredPosts.map(post => {
          const isArchive = post.data.tags && post.data.tags.some(tag => 
            ["philosophy", "mind", "reflection", "thinking"].includes(tag.toLowerCase())
          );
          
          return (
            <div class="glass-card p-5 rounded-xl border border-white/5 hover:border-green-500/20 transition-all duration-300 group">
              <a href={`/blog/${post.slug}`} class="block">
                <div class="flex flex-col sm:flex-row sm:items-center gap-4">
                  {post.data.heroImage && !isArchive && (
                    <div class="sm:w-1/4 flex-shrink-0">
                      <div class="h-24 rounded-lg overflow-hidden">
                        <Image 
                          src={post.data.heroImage.src}
                          alt={post.data.heroImage.alt || post.data.title}
                          class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-500"
                          width={post.data.heroImage.width || 200}
                          height={post.data.heroImage.height || 150}
                          inferSize={post.data.heroImage.inferSize}
                        />
                      </div>
                    </div>
                  )}
                  
                  <div class={post.data.heroImage && !isArchive ? "sm:w-3/4" : "w-full"}>
                    <div class="flex flex-wrap items-center gap-2 mb-1.5">
                      <FormattedDate date={post.data.publishDate} class="text-sm text-gray-400" />
                      
                      {isArchive && (
                        <span class="flex items-center">
                          <span class="mx-1.5 text-gray-600">•</span>
                          <span class="px-1.5 py-0.5 text-xs rounded-full bg-gray-800 text-gray-400 border border-gray-700">Archive</span>
                        </span>
                      )}
                      
                      {post.data.tags && post.data.tags[0] && (
                        <span class="flex items-center">
                          <span class="mx-1.5 text-gray-600">•</span>
                          <span class="text-green-500 text-sm">#{post.data.tags[0]}</span>
                        </span>
                      )}
                      
                      <span class="flex items-center">
                        <span class="mx-1.5 text-gray-600">•</span>
                        <span class="text-gray-400 text-sm flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          {getEstimatedReadTime(post)}
                        </span>
                      </span>
                    </div>
                    
                    <h3 class="text-xl font-medium mb-1.5 group-hover:text-green-400 transition-colors">{post.data.title}</h3>
                    <p class="text-sm text-gray-400 line-clamp-2">{post.data.description}</p>
                    
                    {post.data.tags && post.data.tags.length > 0 && (
                      <div class="flex flex-wrap gap-2 mt-3">
                        {post.data.tags.slice(0, 3).map(tag => (
                          <a href={`/blog/filter?tag=${tag}`} class="text-xs px-2 py-0.5 rounded-full bg-black/30 text-gray-300 hover:bg-green-500/10 hover:text-green-300 transition-colors">
                            #{tag}
                          </a>
                        ))}
                        {post.data.tags.length > 3 && (
                          <span class="text-xs px-2 py-0.5 rounded-full bg-black/30 text-gray-400">+{post.data.tags.length - 3} more</span>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </a>
            </div>
          );
        })}
        
        {filteredPosts.length === 0 && (
          <div class="py-10 text-center glass-card rounded-xl border border-white/5">
            <p class="text-gray-400">No posts found matching your filters.</p>
            <a href="/blog/filter" class="mt-3 inline-block text-green-400 hover:text-green-300 transition-colors">
              Clear filters
            </a>
          </div>
        )}
      </div>
    </div>
    
    <!-- Pagination (placeholder - would be connected to actual pagination logic) -->
    {filteredPosts.length > 10 && (
      <div class="flex justify-center mb-16">
        <div class="flex space-x-1">
          <a href="#" class="px-3 py-1.5 rounded-lg bg-black/30 border border-white/10 text-gray-400 hover:bg-black/40 hover:text-white transition-colors text-sm">
            &laquo;
          </a>
          <a href="#" class="px-3 py-1.5 rounded-lg bg-green-500/20 border border-green-500/30 text-green-400 text-sm">1</a>
          <a href="#" class="px-3 py-1.5 rounded-lg bg-black/30 border border-white/10 text-gray-400 hover:bg-black/40 hover:text-white transition-colors text-sm">2</a>
          <a href="#" class="px-3 py-1.5 rounded-lg bg-black/30 border border-white/10 text-gray-400 hover:bg-black/40 hover:text-white transition-colors text-sm">3</a>
          <a href="#" class="px-3 py-1.5 rounded-lg bg-black/30 border border-white/10 text-gray-400 hover:bg-black/40 hover:text-white transition-colors text-sm">
            &raquo;
          </a>
        </div>
      </div>
    )}
    
    <!-- Return to blog link -->
    <div class="text-center mb-16">
      <a href="/blog" class="inline-flex items-center text-green-400 hover:text-green-300 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to blog home
      </a>
    </div>
  </div>
</PageLayout>

<style>
  /* Silver text effect */
  .silver-text {
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  }
  
  /* Glass card styling */
  .glass-card {
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }
  
  /* Hide scrollbar but allow scrolling */
  .hide-scrollbar {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  
  .hide-scrollbar::-webkit-scrollbar {
    display: none;  /* Chrome, Safari, Opera */
  }
</style>

<script>
  // View toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const compactViewButton = document.getElementById('compact-view');
    const expandedViewButton = document.getElementById('expanded-view');
    const resultsContainer = document.getElementById('results-container');
    
    // Toggle between compact and expanded views
    compactViewButton?.addEventListener('click', () => {
      // Activate compact view button
      compactViewButton.classList.add('bg-green-500/20', 'border-green-500/30', 'text-green-400');
      compactViewButton.classList.remove('bg-black/20', 'border-white/10', 'text-gray-400');
      
      // Deactivate expanded view button
      expandedViewButton?.classList.add('bg-black/20', 'border-white/10', 'text-gray-400');
      expandedViewButton?.classList.remove('bg-green-500/20', 'border-green-500/30', 'text-green-400');
      
      // Apply compact view styling
      if (resultsContainer) {
        resultsContainer.classList.add('space-y-2');
        resultsContainer.classList.remove('space-y-5');
        
        // Make each result more compact
        const resultCards = resultsContainer.querySelectorAll('.glass-card');
        resultCards.forEach((card) => {
          (card as HTMLElement).style.padding = '0.75rem';
        });
      }
    });
    
    expandedViewButton?.addEventListener('click', () => {
      // Activate expanded view button
      expandedViewButton.classList.add('bg-green-500/20', 'border-green-500/30', 'text-green-400');
      expandedViewButton.classList.remove('bg-black/20', 'border-white/10', 'text-gray-400');
      
      // Deactivate compact view button
      compactViewButton?.classList.add('bg-black/20', 'border-white/10', 'text-gray-400');
      compactViewButton?.classList.remove('bg-green-500/20', 'border-green-500/30', 'text-green-400');
      
      // Apply expanded view styling
      if (resultsContainer) {
        resultsContainer.classList.add('space-y-5');
        resultsContainer.classList.remove('space-y-2');
        
        // Make each result more expanded
        const resultCards = resultsContainer.querySelectorAll('.glass-card');
        resultCards.forEach((card) => {
          (card as HTMLElement).style.padding = '1.25rem';
        });
      }
    });
    
    // Handle archive toggle in the form
    const archiveToggle = document.querySelector('input[name="archives"]') as HTMLInputElement;
    if (archiveToggle) {
      archiveToggle.addEventListener('change', () => {
        // Immediately submit the form when the archive toggle changes
        const filterForm = document.getElementById('filter-form') as HTMLFormElement;
        if (filterForm) {
          // Create a hidden input for archives if not checked
          if (!archiveToggle.checked) {
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'archives';
            hiddenInput.value = 'false';
            filterForm.appendChild(hiddenInput);
          }
          
          filterForm.submit();
        }
      });
    }
  });
</script>
