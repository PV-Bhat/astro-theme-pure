---
import { Image } from 'astro:assets'
import { getBlogCollection, getUniqueTags, sortMDByDate } from 'astro-pure/server'
import { Button, FormattedDate, Icon } from 'astro-pure/user'
import PageLayout from '@/layouts/BaseLayout.astro'
import Breadcrumbs from '@/components/core/Breadcrumbs.astro'
import config from '../../site.config'
import '../../styles/animations.css'
import '../../styles/glass.css'

// Breadcrumb items
const breadcrumbItems = [
  {
    label: "Blog",
    href: "/blog"
  }
];

// Get blog collections for displaying real posts
const allPosts = await getBlogCollection();
const sortedPosts = sortMDByDate(allPosts);

// Select featured and recent posts
const featuredPosts = sortedPosts.filter(post => !post.data.draft).slice(0, 3);
const recentPosts = sortedPosts.filter(post => !post.data.draft).slice(0, 5);

// Get unique tags for the categories section
const uniqueTags = getUniqueTags(allPosts);

// Blog navigation items with minimalist icons
const blogNavigationItems = [
  {
    title: "Archives",
    subtext: "Opinionated",
    description: "Personal philosophy and reflections",
    href: "/blog/archives",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
      <path stroke-linecap="round" stroke-linejoin="round" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
    </svg>`,
    gradient: "from-gray-800 to-gray-700"
  },
  {
    title: "View All",
    subtext: "See all by year",
    description: "Browse all blog posts chronologically",
    href: "/blog/all",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
      <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
    </svg>`,
    gradient: "from-gray-800 to-gray-700"
  },
  {
    title: "Search",
    subtext: "Search blogs",
    description: "Find specific content across all blog posts",
    href: "/search?type=blog",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
      <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
    </svg>`,
    gradient: "from-gray-800 to-gray-700"
  },
  {
    title: "Filter By",
    subtext: "Sort blogs",
    description: "Filter and sort blog posts by various criteria",
    href: "/blog/filter",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
      <path stroke-linecap="round" stroke-linejoin="round" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
    </svg>`,
    gradient: "from-gray-800 to-gray-700"
  }
];

const meta = {
  title: 'Blog',
  description: 'Explore articles, reflections, and insights',
}

// Format date function
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
}
---

<PageLayout {meta}>
  <div class="max-w-4xl mx-auto px-4">
    <!-- Breadcrumbs navigation -->
    <div class="mb-6">
      <Breadcrumbs items={breadcrumbItems} />
    </div>
    
    <!-- Header with silver text effect -->
    <div class="text-center mb-8">
      <h1 class="text-4xl sm:text-5xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-b from-white to-gray-400 silver-text">
        Blog
      </h1>
      <p class="text-lg text-gray-300 max-w-2xl mx-auto">
        Explore articles ranging from technical insights to personal reflections
      </p>
    </div>
    
    <!-- Background gradient -->
    <div class="fixed inset-0 -z-10 bg-gradient-radial from-gray-900 to-gray-950 opacity-50"></div>
    
    <!-- Blog Navigation Cards - Extra thin with animations -->
    <div class="grid grid-cols-4 gap-2 mb-10">
      {blogNavigationItems.map(item => (
        <a href={item.href} class="block group">
          <div class="glass-card p-2 h-full border border-white/5 hover:border-green-500/20 rounded-lg transition-all duration-300 transform hover:scale-[1.02] hover:shadow-glow-sm relative overflow-hidden icon-card">
            <div class="flex flex-col items-center text-center gap-1">
              <div class={`p-1.5 rounded-full bg-gradient-to-br ${item.gradient} bg-opacity-20 text-gray-300 group-hover:text-green-400 transition-colors duration-300 icon-container`} set:html={item.icon} />
              <h3 class="text-xs font-medium">{item.title}</h3>
              <p class="text-[10px] text-green-500 opacity-80">{item.subtext}</p>
            </div>
            
            <!-- Glint effect overlay -->
            <div class="glint-effect absolute inset-0 w-[200%] h-full bg-gradient-to-r from-transparent via-white/20 to-transparent -translate-x-full"></div>
          </div>
        </a>
      ))}
    </div>
    
    <!-- Featured Posts Carousel -->
    <div class="mb-12">
      <div class="flex justify-between items-center mb-5">
        <h2 class="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-300">Featured</h2>
        <div class="flex space-x-2">
          <button id="prev-slide" class="p-1 rounded-full bg-black/30 border border-white/10 text-gray-400 hover:text-white transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          <button id="next-slide" class="p-1 rounded-full bg-black/30 border border-white/10 text-gray-400 hover:text-white transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
      </div>
      
      <div class="relative overflow-hidden">
        <div id="featured-carousel" class="flex space-x-4 transition-transform duration-500">
          {featuredPosts.map((post) => (
            <div class="min-w-[calc(33.333%-1rem)] glass-card rounded-xl border border-white/10 overflow-hidden group hover:border-green-500/20 transition-all duration-300">
              <a href={`/blog/${post.slug}`} class="block">
                {post.data.heroImage && (
                  <div class="h-40 overflow-hidden">
                    <Image 
                      src={post.data.heroImage.src}
                      alt={post.data.heroImage.alt || post.data.title}
                      class="w-full h-full object-cover object-center transform group-hover:scale-105 transition-transform duration-500"
                      width={post.data.heroImage.width || 400}
                      height={post.data.heroImage.height || 225}
                      inferSize={post.data.heroImage.inferSize}
                    />
                  </div>
                )}
                <div class="p-4">
                  <div class="flex items-center text-xs text-gray-400 mb-2">
                    <FormattedDate date={post.data.publishDate} />
                    <span class="mx-2">•</span>
                    {post.data.tags && post.data.tags[0] && (
                      <span class="text-green-500">#{post.data.tags[0]}</span>
                    )}
                  </div>
                  <h3 class="text-lg font-medium mb-2 line-clamp-2 group-hover:text-green-400 transition-colors">{post.data.title}</h3>
                  <p class="text-sm text-gray-400 line-clamp-2">{post.data.description}</p>
                </div>
              </a>
            </div>
          ))}
        </div>
        
        <!-- Carousel Navigation Dots -->
        <div class="flex justify-center mt-4 space-x-2">
          <button class="carousel-dot w-2 h-2 rounded-full bg-green-500/50" data-index="0"></button>
          <button class="carousel-dot w-2 h-2 rounded-full bg-white/20" data-index="1"></button>
        </div>
      </div>
    </div>
    
    <!-- Recent Posts Section -->
    <div class="mb-10">
      <div class="flex justify-between items-center mb-5">
        <h2 class="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-300">Recent Posts</h2>
        <a href="/blog/all" class="text-green-500 hover:text-green-300 transition-colors text-sm">
          View all →
        </a>
      </div>
      
      <div class="space-y-5">
        {recentPosts.map((post) => (
          <div class="glass-card p-4 rounded-lg border border-white/5 hover:border-green-500/20 transition-all duration-300 group">
            <a href={`/blog/${post.slug}`} class="block">
              <div class="flex flex-col sm:flex-row sm:items-start gap-4">
                {post.data.heroImage && (
                  <div class="sm:w-1/4">
                    <div class="h-24 w-full rounded-lg overflow-hidden">
                      <Image 
                        src={post.data.heroImage.src}
                        alt={post.data.heroImage.alt || post.data.title}
                        class="w-full h-full object-cover object-center transform group-hover:scale-105 transition-transform duration-500"
                        width={post.data.heroImage.width || 200}
                        height={post.data.heroImage.height || 150}
                        inferSize={post.data.heroImage.inferSize}
                      />
                    </div>
                  </div>
                )}
                
                <div class={post.data.heroImage ? "sm:w-3/4" : "w-full"}>
                  <div class="flex items-center text-xs text-gray-400 mb-1">
                    <FormattedDate date={post.data.publishDate} />
                    {post.data.tags && post.data.tags[0] && (
                      <div class="flex items-center">
                        <span class="mx-2">•</span>
                        <span class="text-green-500">#{post.data.tags[0]}</span>
                      </div>
                    )}
                    {post.data.language && (
                      <div class="flex items-center">
                        <span class="mx-2">•</span>
                        <span class="flex items-center gap-1">
                          <Icon name="earth" class="size-3" />
                          {post.data.language}
                        </span>
                      </div>
                    )}
                  </div>
                  <h3 class="text-lg font-medium mb-1 group-hover:text-green-400 transition-colors">{post.data.title}</h3>
                  <p class="text-sm text-gray-400 line-clamp-2">{post.data.description}</p>
                  
                  {post.data.tags && post.data.tags.length > 1 && (
                    <div class="flex flex-wrap gap-2 mt-2">
                      {post.data.tags.slice(1, 4).map(tag => (
                        <a href={`/tags/${tag}`} class="text-xs px-2 py-0.5 rounded-full bg-black/30 text-gray-300 hover:bg-black/40 transition-colors">
                          #{tag}
                        </a>
                      ))}
                      {post.data.tags.length > 4 && (
                        <span class="text-xs px-2 py-0.5 rounded-full bg-black/30 text-gray-400">+{post.data.tags.length - 4} more</span>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </a>
          </div>
        ))}
      </div>
      
      <!-- Page links -->
      <div class="mt-6 flex justify-center">
        <a href="/blog/1" class="px-4 py-2 bg-black/30 border border-white/10 rounded-lg text-sm text-gray-300 hover:bg-black/40 hover:text-white transition-all" data-astro-prefetch>
          More posts →
        </a>
      </div>
    </div>
    
    <!-- Browse by Category -->
    <div class="mb-12">
      <h2 class="text-2xl font-bold mb-5 bg-clip-text text-transparent bg-gradient-to-r from-white to-gray-300">Browse by Category</h2>
      
      <div class="grid grid-cols-2 sm:grid-cols-4 gap-3">
        {uniqueTags.slice(0, 8).map(tag => (
          <a href={`/tags/${tag}`} class="block group">
            <div class="p-3 bg-black/20 border border-white/5 rounded-lg text-center hover:bg-black/40 hover:border-green-500/20 transition-all duration-300">
              <span class="text-sm text-gray-300 group-hover:text-white transition-colors">{tag}</span>
            </div>
          </a>
        ))}
      </div>
      
      {uniqueTags.length > 8 && (
        <div class="mt-4 text-center">
          <a href="/tags" class="text-sm text-green-500 hover:text-green-300 transition-colors">
            View all categories →
          </a>
        </div>
      )}
    </div>
  </div>
</PageLayout>

<style>
  /* Silver text effect */
  .silver-text {
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  }
  
  /* Glass card styling */
  .glass-card {
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }
  
  /* Subtle glow effect on hover */
  .hover\:shadow-glow-sm:hover {
    box-shadow: 0 0 15px 0 rgba(52, 211, 153, 0.1);
  }
  
  /* Icon container sizing */
  .icon-container {
    min-height: 2rem;
  }
  
  /* Glint animation */
  @keyframes glint {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }
  
  .icon-card:hover .glint-effect {
    animation: glint 1.5s ease-in-out;
  }
  
  /* Background gradient */
  .bg-gradient-radial {
    background-image: radial-gradient(var(--tw-gradient-stops));
  }
</style>

<script>
  // Simple carousel functionality
  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.getElementById('featured-carousel');
    const prevButton = document.getElementById('prev-slide');
    const nextButton = document.getElementById('next-slide');
    const dots = document.querySelectorAll('.carousel-dot');
    
    let currentIndex = 0;
    const slideWidth = carousel?.children[0]?.clientWidth || 0;
    const gap = 16; // Matches the space-x-4 class (1rem = 16px)
    const totalItems = carousel?.children.length || 0;
    const itemsPerPage = window.innerWidth < 768 ? 1 : 3;
    const totalSlides = Math.max(1, Math.ceil(totalItems / itemsPerPage));
    
    function updateCarousel() {
      if (carousel) {
        const offset = currentIndex * ((slideWidth + gap) * itemsPerPage);
        carousel.style.transform = `translateX(-${offset}px)`;
        
        // Update dots
        dots.forEach((dot, index) => {
          if (index === currentIndex) {
            dot.classList.remove('bg-white/20');
            dot.classList.add('bg-green-500/50');
          } else {
            dot.classList.remove('bg-green-500/50');
            dot.classList.add('bg-white/20');
          }
        });
      }
    }
    
    prevButton?.addEventListener('click', () => {
      currentIndex = Math.max(0, currentIndex - 1);
      updateCarousel();
    });
    
    nextButton?.addEventListener('click', () => {
      currentIndex = Math.min(totalSlides - 1, currentIndex + 1);
      updateCarousel();
    });
    
    dots.forEach((dot) => {
      dot.addEventListener('click', () => {
        const index = parseInt(dot.getAttribute('data-index') || '0');
        currentIndex = index;
        updateCarousel();
      });
    });
    
    // Touch swipe support
    let touchStartX = 0;
    let touchEndX = 0;
    
    carousel?.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });
    
    carousel?.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
    
    function handleSwipe() {
      const swipeThreshold = 50; // Minimum pixels to register as a swipe
      
      if (touchEndX < touchStartX - swipeThreshold) {
        // Swiped left - go to next slide
        currentIndex = Math.min(totalSlides - 1, currentIndex + 1);
        updateCarousel();
      } else if (touchEndX > touchStartX + swipeThreshold) {
        // Swiped right - go to previous slide
        currentIndex = Math.max(0, currentIndex - 1);
        updateCarousel();
      }
    }
  });
</script>
