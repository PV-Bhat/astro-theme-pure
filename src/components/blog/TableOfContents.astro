---
// TableOfContents.astro - adds animated TOC for blog posts
import type { MarkdownHeading } from 'astro';

interface Props {
  headings: MarkdownHeading[];
  class?: string;
}

const { headings, class: className = "" } = Astro.props;

// Filter headings to only include h2 and h3
const filteredHeadings = headings.filter(
  (heading) => heading.depth >= 2 && heading.depth <= 3
);
---

<toc-component class={`${className}`}>
  <div class="sticky top-24 overflow-hidden">
    <h3 class="font-semibold mb-4 text-white">TABLE OF CONTENTS</h3>
    
    <nav class="toc-container">
      <ul class="space-y-2 text-sm">
        {filteredHeadings.map((heading) => (
          <li class={`toc-item relative ${heading.depth === 3 ? "ml-3" : ""}`}>
            <div class="toc-progress absolute left-0 top-0 w-[2px] h-0 bg-gradient-to-b from-[#56bdf8] to-[#ec4899] rounded-full"></div>
            <a 
              href={`#${heading.slug}`} 
              class="toc-link block py-1 pl-3 rounded-md text-gray-400 hover:text-white transition-colors"
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
</toc-component>

<script>
  class TOCComponent extends HTMLElement {
    constructor() {
      super();
      this.setupIntersectionObserver();
    }

    setupIntersectionObserver() {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            const id = entry.target.getAttribute('id');
            const tocLink = this.querySelector(`a[href="#${id}"]`);
            const tocProgress = tocLink?.previousElementSibling;
            
            if (entry.isIntersecting) {
              tocLink?.classList.add('active');
              tocProgress?.classList.add('active', 'readed');
            } else {
              tocLink?.classList.remove('active');
              tocProgress?.classList.remove('active');
            }
          });
        },
        { rootMargin: '-100px 0px -66%' }
      );

      // Observe all section headings
      document.querySelectorAll('h2, h3').forEach((heading) => {
        observer.observe(heading);
      });
    }
  }

  customElements.define('toc-component', TOCComponent);
</script>

<style>
  .toc-item {
    position: relative;
    transition: all 0.3s ease;
  }
  
  .toc-link {
    position: relative;
    display: block;
    transition: all 0.3s ease;
  }
  
  .toc-link.active {
    background-color: rgba(255, 255, 255, 0.05);
    color: white;
    transform: translateX(2px);
  }
  
  .toc-progress {
    transition: height 0.3s ease, opacity 0.3s ease;
  }
  
  .toc-progress.readed {
    height: 100%;
    opacity: 0.5;
  }
  
  .toc-progress.active {
    opacity: 1;
  }
</style> 